{"version":3,"sources":["actions/index.js","reducers/index.js","reducers/posts.js","serviceWorker.js","components/Input/index.js","components/FilterList/index.js","components/Item/index.js","components/ListOfItems/index.js","components/Filter/index.js","containers/getList.js","components/App/index.js","index.js"],"names":["RECEIVE_POSTS","fetchPosts","dispatch","fetch","then","response","json","error","console","log","type","receivePosts","KEY_FROM_TAG","KEY_FROM_INPUT","rootReducer","combineReducers","posts","state","arguments","length","undefined","items","filterMenu","filterFromTag","filterFromInput","action","filterList","results","map","item","tags","flat","reduce","accum","indexOf","concat","Object","toConsumableArray","unshift","objectSpread","key","Boolean","window","location","hostname","match","Input","props","react_default","a","createElement","className","name","id","placeholder","onChange","getItemsByInput","onFocus","document","getElementById","checked","onKeyDown","e","target","value","keyCode","preventDefault","includes","onBlur","FilterList","components_Input","i","filterByTag","filterByInput","onClick","getItemsByTag","defaultChecked","htmlFor","Item","title","join","ListOfItems","components_Item","toLowerCase","Filter","_this","filterListByTags","charAt","filterListByInput","this","Fragment","components_FilterList","components_ListOfItems","statePosts","Component","connect","keyTag","keyInput","App","components_Filter","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","es","components_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iVAGaA,EAAgB,gBAStB,SAASC,IACd,OAAO,SAASC,GACd,OAAOC,IAAM,aACVC,KACC,SAAAC,GAAQ,OACNA,EAASC,QACX,SAAAC,GAAK,OAAIC,QAAQC,IAAI,qBAAsBF,KAE5CH,KAAK,SAAAE,GAAI,OACRJ,EAhBR,SAAsBI,GACpB,MAAO,CACLI,KAAMV,EACNM,QAaaK,CAAaL,OAKvB,IAAMM,EAAe,eASrB,IAAMC,EAAiB,iBChC9B,IAIeC,EAJKC,0BAAgB,CAClCC,MCEK,WAQL,IAPAC,EAOAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAPQ,CACNG,MAAO,GACPC,WAAY,GACZC,cAAe,GACfC,gBAAiB,IAEnBC,EACAP,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACA,OAAQK,EAAOf,MACb,KAAKV,EACH,IACI0B,EADWD,EAAOnB,KAAKqB,QAAQC,IAAI,SAACC,GAAD,OAAUA,EAAKC,OAAMC,OACpCC,OAAO,SAACC,EAAOJ,GACrC,OAAgC,IAAzBI,EAAMC,QAAQL,GAAeI,EAA7B,GAAAE,OAAAC,OAAAC,EAAA,EAAAD,CAAyCH,GAAzC,CAAgDJ,KACvD,IAEF,OADAH,EAAWY,QAAQ,OACZF,OAAAG,EAAA,EAAAH,CAAA,GACFnB,EADL,CAEEI,MAAOI,EAAOnB,KAAKqB,QACnBL,WAAYI,IAEhB,KAAKd,EACH,OAAOwB,OAAAG,EAAA,EAAAH,CAAA,GACFnB,EADL,CAEEM,cAAeE,EAAOe,IACtBhB,gBAAiB,KAErB,KAAKX,EACH,OAAOuB,OAAAG,EAAA,EAAAH,CAAA,GACFnB,EADL,CAEEO,gBAAiBC,EAAOe,IACxBjB,cAAe,KAEnB,QACE,OAAON,MC5BOwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,oICkBSC,EAlCD,SAAAC,GAoBZ,OACEC,EAAAC,EAAAC,cAAA,SAAOxC,KAAK,OACLyC,UAAU,eACVC,KAAK,SACLC,GAAG,qBACHC,YAAY,eACZC,SAAUR,EAAMS,gBAChBC,QAZT,WACcC,SAASC,eAAe,iBAC9BC,SAAU,GAWTC,UAtBT,SAAiBC,GACQ,KAAnBA,EAAEC,OAAOC,OAA8B,KAAdF,EAAEG,SAC7BH,EAAEI,iBAEDJ,EAAEC,OAAOC,MAAMG,SAAS,MAAsB,KAAdL,EAAEG,SACnCH,EAAEI,kBAkBGE,OA3BT,SAAiBN,GACfA,EAAEC,OAAOC,MAAQ,OCiDNK,EAnDI,SAAAtB,GACjB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACZH,EAAAC,EAAAC,cAAA,MAAIV,IAAK,KACPQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBACVzC,KAAK,QACL0C,KAAK,SACLC,GAAG,kBACVL,EAAAC,EAAAC,cAACoB,EAAD,CAAOd,gBAAmBT,EAAMS,oBAGnCT,EAAMzB,WAAWM,IAAI,SAACC,EAAM0C,GAAP,OAClBvB,EAAAC,EAAAC,cAAA,MAAIV,IAAK+B,GACgB,KAAtBxB,EAAMyB,aAA8C,KAAxBzB,EAAM0B,eAAiC,QAAT5C,EACvDmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBACVzC,KAAK,QACL0C,KAAK,SACLC,GAAG,eACHW,MAAOnC,EACP6C,QAAS3B,EAAM4B,cACfC,eAAe,YAEtB5B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBACV0B,QAAQ,gBACZhD,IAGNmB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBACVzC,KAAK,QACL0C,KAAK,SACLC,GAAG,eACHW,MAAOnC,EACP6C,QAAS3B,EAAM4B,gBAEtB3B,EAAAC,EAAAC,cAAA,SAAOC,UAAU,mBACV0B,QAAQ,gBACZhD,UC/BRiD,SATF,SAAA/B,GACX,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QACZH,EAAAC,EAAAC,cAAA,UAAKH,EAAMgC,OACX/B,EAAAC,EAAAC,cAAA,SAAIH,EAAMjB,KAAKkD,KAAK,UCmCXC,SAtCK,SAAAlC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACW,KAAtBJ,EAAMyB,aAA4C,QAAtBzB,EAAMyB,YAC9BzB,EAAM/B,MAAMY,IAAI,SAACC,EAAM0C,GAAP,OACb1C,EAAKC,KAAKF,IAAI,SAACoC,GAAD,OACTA,IAAUjB,EAAMyB,YACfxB,EAAAC,EAAAC,cAACgC,EAAD,CAAM1C,IAAK+B,EACLQ,MAAOlD,EAAKkD,MACZjD,KAAMD,EAAKC,OAElB,SAIe,KAAxBiB,EAAM0B,cACJ1B,EAAM/B,MAAMY,IAAI,SAACC,EAAM0C,GACrB,OAA+E,IAAxE1C,EAAKkD,MAAMI,cAAcjD,QAAQa,EAAM0B,cAAcU,eACxDnC,EAAAC,EAAAC,cAACgC,EAAD,CAAM1C,IAAK+B,EACLQ,MAAOlD,EAAKkD,MACZjD,KAAMD,EAAKC,OAEjB,OAENiB,EAAM/B,MAAMY,IAAI,SAACC,EAAM0C,GAAP,OACdvB,EAAAC,EAAAC,cAACgC,EAAD,CAAM1C,IAAK+B,EACLQ,MAAOlD,EAAKkD,MACZjD,KAAMD,EAAKC,aCzB3BsD,oNAEJT,cAAgB,SAACb,GACfuB,EAAKtC,MAAMuC,iBAAkBxB,EAAEC,OAAOC,UAGxCR,gBAAkB,SAACM,GACe,MAA7BA,EAAEC,OAAOC,MAAMuB,OAAO,IAAYzB,EAAEI,iBACvCmB,EAAKtC,MAAMyC,kBAAmB1B,EAAEC,OAAOC,mNAIjCyB,KAAK1C,MAAM9C,gJAIjB,OACI+C,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyC,SAAA,KACoC,IAAjCD,KAAK1C,MAAMzB,WAAWH,OACnB6B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACyC,EAAD,CAAYrE,WAAcmE,KAAK1C,MAAMzB,WACzBqD,cAAiBc,KAAKd,cACtBnB,gBAAmBiC,KAAKjC,gBACxBgB,YAAeiB,KAAK1C,MAAMyB,YAC1BC,cAAiBgB,KAAK1C,MAAM0B,gBAExCzB,EAAAC,EAAAC,cAAC0C,EAAD,CAAa5E,MAASyE,KAAK1C,MAAM8C,WACpBrB,YAAeiB,KAAK1C,MAAMyB,YAC1BC,cAAiBgB,KAAK1C,MAAM0B,iBAG3C,aA/BOqB,cAqCNC,cC1CgB,SAAC9E,GAAD,MAAY,CACzCK,WAAYL,EAAMD,MAAMM,WACxBuE,WAAY5E,EAAMD,MAAMK,MACxBmD,YAAavD,EAAMD,MAAMO,cACzBkD,cAAexD,EAAMD,MAAMQ,kBAGK,SAACtB,GAAD,MAAe,CAC/CD,WAAY,kBAAMC,EAASD,MAC3BqF,iBAAkB,SAAC9C,GAAD,OAAStC,ETiBtB,SAAgBsC,GACrB,MAAO,CACL9B,KAAME,EACN4B,OSpBkCwD,CAAOxD,KAC3CgD,kBAAmB,SAAChD,GAAD,OAAStC,ETyBvB,SAAkBsC,GACvB,MAAO,CACL9B,KAAMG,EACN2B,OS5BmCyD,CAASzD,ODgCjCuD,CAGbX,GEhCac,mLARX,OACElD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACiD,EAAD,cALUL,aCOZM,SAAQC,sBACZvF,EACAwF,8BAAoBC,0BAClBC,QAIJC,IAASC,OACP1D,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAUP,MAAOA,GACfpD,EAAAC,EAAAC,cAAC0D,EAAD,OAEFlD,SAASC,eAAe,SR2GpB,kBAAmBkD,WACrBA,UAAUC,cAAcC,MAAM3G,KAAK,SAAA4G,GACjCA,EAAaC","file":"static/js/main.ce1d70a5.chunk.js","sourcesContent":["import fetch from 'cross-fetch';\n\n//when get response\nexport const RECEIVE_POSTS = 'RECEIVE_POSTS'\n\nfunction receivePosts(json) {\n  return {\n    type: RECEIVE_POSTS,\n    json\n  }\n}\n\nexport function fetchPosts() {\n  return function(dispatch) {\n    return fetch('list.json')\n      .then(\n        response =>\n          response.json(),\n        error => console.log('An error occurred.', error)\n      )\n      .then(json =>\n        dispatch(receivePosts(json))\n      )\n  }\n}\n\nexport const KEY_FROM_TAG = 'KEY_FROM_TAG'\n\nexport function keyTag(key) {\n  return {\n    type: KEY_FROM_TAG,\n    key\n  }\n}\n\nexport const KEY_FROM_INPUT = 'KEY_FROM_INPUT'\n\nexport function keyInput(key) {\n  return {\n    type: KEY_FROM_INPUT,\n    key\n  }\n}\n","import { combineReducers } from 'redux';\nimport { posts } from './posts';\n\nconst rootReducer = combineReducers({\n  posts\n});\n\nexport default rootReducer\n","import {\n  RECEIVE_POSTS,\n  KEY_FROM_TAG,\n  KEY_FROM_INPUT\n} from '../actions';\n\nexport function posts(\n  state = {\n    items: {},\n    filterMenu: [],\n    filterFromTag: \"\",\n    filterFromInput: \"\"\n  },\n  action\n) {\n  switch (action.type) {\n    case RECEIVE_POSTS:\n      const newArr = action.json.results.map((item) => item.tags).flat();\n      let filterList = newArr.reduce((accum, item) => {\n        return accum.indexOf(item) !== -1 ? accum : [...accum, item]\n      },[]);\n      filterList.unshift('all');\n      return {\n        ...state,\n        items: action.json.results,\n        filterMenu: filterList\n      };\n    case KEY_FROM_TAG:\n      return {\n        ...state,\n        filterFromTag: action.key,\n        filterFromInput: ''\n      };\n    case KEY_FROM_INPUT:\n      return {\n        ...state,\n        filterFromInput: action.key,\n        filterFromTag: ''\n      };\n    default:\n      return state\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Input = props => {\n\n  function noWords(e) {\n    e.target.value = '';\n  }\n\n  function noSpace(e) {\n    if (e.target.value === '' && e.keyCode === 32) {\n      e.preventDefault();\n    }\n    if(e.target.value.includes(' ') && e.keyCode === 32) {\n      e.preventDefault();\n    }\n  }\n\n  function radioChecked() {\n    let radio = document.getElementById('filterRadios1');\n    radio.checked = true;\n  }\n\n  return (\n    <input type=\"text\"\n           className=\"form-control\"\n           name=\"Radios\"\n           id=\"exampleInputEmail1\"\n           placeholder=\"Enter text..\"\n           onChange={props.getItemsByInput}\n           onFocus={radioChecked}\n           onKeyDown={noSpace}\n           onBlur={noWords}\n    />\n  );\n};\n\nexport default Input\n","import React from 'react';\nimport Input from '../Input';\n\nconst FilterList = props => {\n  return (\n    <div className=\"col-md-4\">\n      <ul className=\"filterList\">\n        <li key={333}>\n          <div className=\"form-check\">\n            <input className=\"form-check-input\"\n                   type=\"radio\"\n                   name=\"Radios\"\n                   id=\"filterRadios1\"/>\n            <Input getItemsByInput = {props.getItemsByInput}/>\n          </div>\n        </li>\n        {props.filterMenu.map((item, i) =>\n            <li key={i} >\n              {props.filterByTag === '' && props.filterByInput === '' && item === 'all'\n                ? <div className=\"form-check\">\n                    <input className=\"form-check-input\"\n                           type=\"radio\"\n                           name=\"Radios\"\n                           id=\"filterRadios\"\n                           value={item}\n                           onClick={props.getItemsByTag}\n                           defaultChecked=\"checked\"\n                    />\n                    <label className=\"form-check-label\"\n                           htmlFor=\"filterRadios\">\n                      {item}\n                    </label>\n                  </div>\n                :<div className=\"form-check\">\n                    <input className=\"form-check-input\"\n                           type=\"radio\"\n                           name=\"Radios\"\n                           id=\"filterRadios\"\n                           value={item}\n                           onClick={props.getItemsByTag}\n                    />\n                    <label className=\"form-check-label\"\n                           htmlFor=\"filterRadios\">\n                      {item}\n                    </label>\n                  </div>\n              }\n            </li>\n        )}\n      </ul>\n    </div>\n  );\n};\n\nexport default FilterList\n","import React from 'react';\nimport './Item.css';\n\nconst Item = props => {\n  return (\n    <li className='list'>\n      <h5>{props.title}</h5>\n      <p>{props.tags.join(', ')}</p>\n    </li>\n  );\n};\n\nexport default Item\n","import React from 'react';\nimport Item from '../Item';\nimport './ListOfItems.css';\n\nconst ListOfItems = props => {\n  return (\n    <div className=\"col-md-8\">\n      <ul className='listOfTwoColumns'>\n        {props.filterByTag !== '' && props.filterByTag !== 'all'\n          ? (props.posts.map((item, i) =>\n                item.tags.map((value) =>\n                    (value === props.filterByTag)\n                    ? <Item key={i}\n                            title={item.title}\n                            tags={item.tags}\n                      />\n                    :null\n                )\n             )\n          )\n          :(props.filterByInput !== ''\n            ? props.posts.map((item, i) => {\n                return item.title.toLowerCase().indexOf(props.filterByInput.toLowerCase()) === 0\n                  ? <Item key={i}\n                          title={item.title}\n                          tags={item.tags}\n                  />\n                  : null\n              })\n            : props.posts.map((item, i) =>\n                <Item key={i}\n                      title={item.title}\n                      tags={item.tags}\n                />\n              )\n          )\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default ListOfItems\n","import React, { Component } from 'react';\nimport {connect} from \"react-redux\";\nimport { mapStateToProps,  mapDispatchToProps} from '../../containers/getList';\nimport FilterList from \"../FilterList\";\nimport ListOfItems from \"../ListOfItems\";\nimport './Filter.css';\n\nclass Filter extends Component {\n\n  getItemsByTag = (e) => {\n    this.props.filterListByTags (e.target.value);\n  };\n\n  getItemsByInput = (e) => {\n    if(e.target.value.charAt(0) === ' ') e.preventDefault();\n    this.props.filterListByInput (e.target.value);\n  };\n\n  async componentDidMount() {\n    await this.props.fetchPosts();\n  };\n\n  render() {\n    return (\n        <>\n          {this.props.filterMenu.length !== 0\n            ? <div className=\"Filter row\" >\n                <FilterList filterMenu = {this.props.filterMenu}\n                            getItemsByTag = {this.getItemsByTag}\n                            getItemsByInput = {this.getItemsByInput}\n                            filterByTag = {this.props.filterByTag}\n                            filterByInput = {this.props.filterByInput}\n                />\n                <ListOfItems posts = {this.props.statePosts}\n                             filterByTag = {this.props.filterByTag}\n                             filterByInput = {this.props.filterByInput}\n                />\n              </div>\n            : null}\n        </>\n        );\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Filter)\n","import { fetchPosts, keyTag, keyInput } from '../actions'\n\nexport const mapStateToProps = (state) => ({\n  filterMenu: state.posts.filterMenu,\n  statePosts: state.posts.items,\n  filterByTag: state.posts.filterFromTag,\n  filterByInput: state.posts.filterFromInput\n});\n\nexport const mapDispatchToProps = (dispatch) => ({\n  fetchPosts: () => dispatch(fetchPosts()),\n  filterListByTags: (key) => dispatch(keyTag(key)),\n  filterListByInput: (key) => dispatch(keyInput(key))\n});\n\n","import React, { Component } from 'react';\nimport './App.css';\nimport Filter from \"../Filter\";\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App container\">\n        <Filter/>\n      </div>\n    );\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from './reducers';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\nimport './index.css';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware (\n    thunkMiddleware\n  ))\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}